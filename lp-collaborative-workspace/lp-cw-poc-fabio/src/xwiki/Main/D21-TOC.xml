<?xml version='1.0' encoding='UTF-8'?>
<xwikidoc version="1.1">
  <web>Main</web>
  <name>D21-TOC</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>XWiki.Admin</creator>
  <creationDate>1409514539000</creationDate>
  <author>XWiki.Admin</author>
  <contentAuthor>XWiki.Admin</contentAuthor>
  <date>1409519570000</date>
  <contentUpdateDate>1409519570000</contentUpdateDate>
  <version>20.1</version>
  <title>Proposal for D2.1 TOC</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>* (((**Introduction**&#xd;
)))&#xd;
** (((**Scope and summary**  &#xd;
General description of the purpose of the document, its context, what it covers and what it doesn't. In this section we can also present the stakeholders who are taken into account by the provided documentation, and where they can find the information that is more relevant to them (e.g., implementors, administrators, etc.).'&#xd;
)))&#xd;
** (((**How the document is organized**&#xd;
)))&#xd;
* (((**System overview**&#xd;
Describe the system in a conversational style, and highlight its salient functionalities, users and use case. We can use mockups to better describe the system from the end user's point of view.&#xd;
&#xd;
This section can be seen as a distilled version of the DoW and will help the reader to get a concrete idea of what we are trying to build and its purpose.&#xd;
)))&#xd;
* (((**System architecture**&#xd;
This section contains several subsections each of them showing one or more architectural views that shows the system architecture under different angles. The number of views will depend on the level of detail we would like to present.&#xd;
)))&#xd;
** (((**Static/Module views**&#xd;
Module views describe the static structure of the system and define the main implementations units, and provide a blueprint for the source code and the data store. The purpose is twofold:&#xd;
* Provide a top-down representation of the system&#xd;
* Help to define the implementation responsibilities.&#xd;
&#xd;
Module views can be used to describe how modules are decomposed (i.e., //is-part-of//), and what are the relations between modules (e.g., //uses//, //depends//)&#xd;
&#xd;
The interfaces provided or required by modules, and the data model that is used by them are also documented accordingly. &#xd;
&#xd;
UML package and class diagrams can be used to describe these views.&#xd;
)))&#xd;
** (((**Runtime/Component and connectors views**&#xd;
Runtime/Component and connectors views describes the structure that exists at runtime (e.g., client, servers, processes, data stores, etc.), and define the characteristics of their interactions (e.g., protocols) and how they interact.&#xd;
&#xd;
The interfaces provided or required, and the ports associated to components and connectors are also documented accordingly.&#xd;
&#xd;
UML Component or Composite Structure diagrams can be used to document the static aspects, while Sequence or Activity diagrams can be used to show the relevant interactions that can happen.&#xd;
)))&#xd;
** (((**Deployment/Allocation views**&#xd;
These views describe how the software components and connectors are mapped to the hardware of the computing platform, but also how they are packaged for installation.&#xd;
&#xd;
UML deployment diagrams can be used for this purpose.&#xd;
)))&#xd;
** (((**Mappings**&#xd;
This section contains mappings between the views - if needed (e.g., which modules are used in components and connectors, etc.)&#xd;
)))&#xd;
** **Architectural decisions**&#xd;
** (((**Open questions**&#xd;
Since the project is still in its early development, this section might describe the aspects that are not yet clear and that will be addressed in the future.&#xd;
)))&#xd;
* **Glossary**&#xd;
* **References**&#xd;
&#xd;
== Notes&#xd;
&#xd;
* The main goal of this document is to define the architecture of a minimum-viable-product that can then drive its implementation (i.e., help better coordinating the cross-WP activities for implementing a coherent system), and provide a useful description of what we are trying to achieve for the officer and the reviewers.&#xd;
&#xd;
* Since most of the content of the document will be based on UML, in order to better collaborate we will use the MagicDraw Team Server in order to store the information about the structure of the views, and for generating the corresponding diagrams. Darius Silingas (NME) and Jovaldas Januskevicius (NME) will help us in using MagicDraw correctly (and not just as a surrogate of a drawing tool :))&#xd;
&#xd;
* It is not clear yet how we will collaborate on the final document. Ideally the **System Architecture** section could be completely generated as an export from MagicDraw, but this might require some effort to get it working correctly and we might not have the time. For sure, all the structural information for the architecture and the corresponding diagrams will be put into the Team Server. The prose-oriented parts will be written following the approach of using Google Docs for the drafts, and a reformatting in LaTeX for the final versions.&#xd;
&#xd;
== References&#xd;
&#xd;
1. Kruchten, Philippe (1995, November). [[Architectural Blueprints - The “4+1” View Model of Software Architecture>>http://www.cs.ubc.ca/~~gregor/teaching/papers/4+1view-architecture.pdf]]. IEEE Software 12 (6), pp. 42-50.&#xd;
1. Felix Bachmann, Len Bass, Paul C. Clements, David Garlan, James Ivers, Reed Little, Paulo Merson, Robert Nord, Judith A. Stafford (2010, October). [[Documenting Software Architectures: Views and Beyond, Second Edition>>http://resources.sei.cmu.edu/library/asset-view.cfm?assetid=30386]]. Addison-Wesley Professional</content>
</xwikidoc>