-- @nsURI ADOXX=http://www.ado.org
-- @nsURI XWIKI=http://www.xwiki.org

module ado2xwiki;

create OUT : XWIKI from IN : ADOXX, PARAMS : Parameter;

helper def : getModelSetId() : String =
	Parameter!Params.allInstances()->first().fileName;


-- This helper stores an integer value used to assign an ID to each generated Object
helper def: curObj : Integer = 0;
-- This helper increments the value to be assigned to a generated Object
helper def: incCurObj() : Integer = thisModule.refSetValue('curObj', thisModule.curObj + 1); 
-- This helper reset the curObj
helper def: resetCurObj() : OclAny = thisModule.refSetValue('curObj', 0); 

helper context String def : name : String = self.substring(self.lastIndexOf('!')+2, self.size());

helper context String def : escapeId : String = self.regexReplaceAll('\\.', '\\\\.');

helper def : mapModelType : Map(String, String) = Map {
	('Business process diagram (BPMN 2.0)', 'bpmn'),
	('Competency model', 'cm'),
	('BMM', 'bmm'),
	('Document and Knowledge model', 'dkm'),
	('Organizational structure', 'omm')
};
helper context String def : mapStandardModelType : String = if thisModule.mapModelType.containsKey(self) then thisModule.mapModelType.get(self) else self endif;

helper def : mapInstanceType : Map(String, String) = Map {
	-- Business Process
	('Task', 'bp-task'),
	('Sub-Process', 'bpmn-process'),
	('Start Event', 'bpmn-event-start'),
	('Intermediate Event (boundary)', 'bpmn-event-intermediate'),
	('Intermediate Event (sequence flow)', 'bpmn-event-intermediate'),
	('End Event', 'bpmn-event-end'),
	('Exclusive Gateway', 'bpmn-gateway-exclusive'),
	('Non-exclusive Gateway', 'bpmn-gateway-nonexclusive'),
	('Pool', 'bpmn-pool'),
	('Pool (collapsed)', 'bpmn-pool'),
	('Lane', 'bp-lane'),
	('Data Object', 'bpmn-data-object'),
	('Text Annotation', 'bpmn-annotation'),
	-- Competency Model
	('Competency', 'cm-competency'),
	-- BMM
	('Learning Goal', 'bmm-learning-goal'),
	('Group (BMM)', 'bmm-group'),
	-- Document and Knowledge model
	('Document', 'dkm-document'),
	('Group', 'dkm-group'),
	-- Organizational structure
	('Organizational unit', 'omm-unit'),
	('Role', 'omm-role'),
	('Performer', 'omm-performer')
};
helper context String def : mapStandardInstanceType : String = if thisModule.mapInstanceType.containsKey(self) then thisModule.mapInstanceType.get(self) else self endif;

-- helper connectors
helper context ADOXX!INSTANCEType def : relatedIncomingConnector : Sequence(ADOXX!COLLECTORType) =
	self.refImmediateComposite().cONNECTOR->select(e | ((e.tO.class = self.class) and (e.tO.instance = self.name))).flatten();
helper context ADOXX!INSTANCEType def : relatedOutgoingConnector : Sequence(ADOXX!COLLECTORType) =
	self.refImmediateComposite().cONNECTOR->select(e | ((e.fROM.class = self.class) and (e.fROM.instance = self.name))).flatten();
--end helper connectors

helper def: modeltypeFilter(): String = ADOXX!MODELType.allInstances()->
													select(e |e.modeltype<>'KPI-Overview')->
													collect(e | e.modeltype).asOrderedSet()->
													iterate(e; filter: String = '(' |
														filter.concat('(s.modeltype=\''+e+'\') or ')
													).toString().regexReplaceAll('or $', ')');

helper def : instances : Map(OclAny, ADOXX!INSTANCEType) = Map{};
helper def : loadInstances : Map(OclAny, ADOXX!INSTANCEType) =
   ADOXX!INSTANCEType.allInstances()->iterate(e; acc : Map(OclAny, ADOXX!INSTANCEType) = Map{} |
     acc.including(e.refImmediateComposite().name+'-'+e.class+'-'+e.name, e)
   );
helper def :getInstance(model: String, class: String, instance : String):ADOXX!INSTANCEType = 
	if (thisModule.instances.get(model+'-'+class+'-'+instance).oclIsUndefined()) then
		OclUndefined.debug('undef: '+model+'-'+class+'-'+instance)
	else
		thisModule.instances.get(model+'-'+class+'-'+instance)
	endif;
		
helper def :documentRoot : XWIKI!DocumentRoot = OclUndefined;

rule RootWebHome {
	from s: ADOXX!ADOXMLType
	to t: XWIKI!DocumentRoot (
		object <- msc,
		page <- Sequence{}->append(p)
	),
	-----------------------  Static WebHome  -----------------------
	p: XWIKI!Page (
	   	title <- 'Home',
		parent <- '',
		wiki <- 'xwiki',
		space <- thisModule.getModelSetId(),
		name <- 'WebHome',
		content <- '{{include reference="LPCode\\.ModelSetWebHome" /}}'
	)
	, msc:XWIKI!Object (
		className <- 'LPCode.ModelSetClass',
		wiki <- 'xwiki',
		space <- thisModule.getModelSetId(),
		pageName <- 'WebHome',
		property <- Sequence{msc_p1, msc_p2}
	),
	msc_p1:XWIKI!Property (
		name <- 'id',
		type <- 'String',
		value <- thisModule.getModelSetId()
	),
	msc_p2:XWIKI!Property (
		name <- 'name',
		type <- 'String',
		value <- 'Set of models' --TODO: there is no model set name defined in our process
	)
	do {
		thisModule.documentRoot <- t;
		thisModule.instances <- thisModule.loadInstances;
	}
}

-----------------------  MODELType  --------------------------
rule MODELType2WebHome {
	from s:ADOXX!MODELType
	--from s:ADOXX!MODELType( (s.modeltype='Organizational structure') )--or 
	--						(s.modeltype='Document and Knowledge model') or 
	--						(s.modeltype='BMM') or 
	--						(s.modeltype='Competency model') or 
	--						(s.modeltype='Business process diagram (BPMN 2.0)') )
	-----------------------  mod.XXXXX  ----------------------- 
	to p: XWIKI!Page (
	   	title <- s.name,
		parent <- 'WebHome',
		wiki <- 'xwiki',
		space <- thisModule.getModelSetId(),
		name <- s.id,
		content <- ''
	)
	, mc:XWIKI!Object (
		className <- 'LPCode.ModelClass',
		number <- thisModule.curObj,
		wiki <- 'xwiki',
		space <- thisModule.getModelSetId(),
		pageName <- s.id,
		property <- Sequence{mc_p1, mc_p2, mc_p3}
	),
	mc_p1:XWIKI!Property (
		name <- 'id',
		type <- 'String',
		value <- s.id	
	),
	mc_p2:XWIKI!Property (
		name <- 'name',
		type <- 'String',
		value <- s.name	
	),
	mc_p3:XWIKI!Property (
		name <- 'type',
		type <- 'StaticList',
		value <- s.modeltype.mapStandardModelType
	)
	do {
		thisModule.documentRoot.page <- p;
		thisModule.documentRoot.object <- mc;
	}
}

-----------------------  INSTANCEType  -----------------------
rule INSTANCEType2Page {
	from s:ADOXX!INSTANCEType 
	-----------------------  obj.XXXXX  ----------------------- 
	to t_p: XWIKI!Page (
	   	title <- s.name,
		parent <- s.refImmediateComposite().id.escapeId, --modelsetid
		wiki <- 'xwiki',
		space <- thisModule.getModelSetId(),
		name <- s.id,
		content <- ''  --damiano description
	)
	------------------  objects\LPCode\BaseElementClass  ------------------
	, bec:XWIKI!Object (
		className <- 'LPCode.BaseElementClass',
		number <- thisModule.curObj,
		wiki <- 'xwiki',
		space <- thisModule.getModelSetId(),
		pageName <- s.id,
		property <- Sequence{bec_p0, bec_p1, bec_p2, bec_p3, bec_p4}->asSequence()
	),
	bec_p0:XWIKI!Property (
		name <- 'modelid',
		type <- 'String',
		value <- s.refImmediateComposite().id
	),
	bec_p1:XWIKI!Property (
		name <- 'id',
		type <- 'String',
		value <- s.id
	),
	bec_p2:XWIKI!Property (
		name <- 'name',
		type <- 'String',
		value <- s.name
	),
	bec_p3:XWIKI!Property (
		name <- 'type',
		type <- 'StaticList',
		value <- s.class.mapStandardInstanceType
	),
	bec_p4:XWIKI!Property (
		name <- 'documentation',
		type <- 'TextArea',
		value <- ''
	)
	do {
		thisModule.documentRoot.page <- t_p;
		thisModule.documentRoot.object <- bec;
		
		-- Relations --
		for (e in s.relatedIncomingConnector) {
			let t: ADOXX!INSTANCEType = thisModule.getInstance(e.refImmediateComposite().name, e.fROM.class, e.fROM.instance) in 
			thisModule.CONNECTORType2Object(s, e, t);
			thisModule.incCurObj();
		}
		
		for (e in s.relatedOutgoingConnector) {
			let t: ADOXX!INSTANCEType = thisModule.getInstance(e.refImmediateComposite().name, e.tO.class, e.tO.instance) in 
			thisModule.CONNECTORType2Object(s, e, t);
			thisModule.incCurObj();
		}
		-- Relations end --
		
		--reset the counter
		thisModule.resetCurObj();
	}
}

----------------------  CONNECTORType  ----------------------
rule CONNECTORType2Object(s: ADOXX!INSTANCEType, c:ADOXX!CONNECTORType, t: ADOXX!INSTANCEType) {
	----------------  objects\LPCode\LinkClass  ----------------
	to lc:XWIKI!Object (
		className <- 'LPCode.LinkClass',
		number <- thisModule.curObj,
		wiki <- 'xwiki',
		space <- thisModule.getModelSetId(),
		pageName <- s.id,
		property <- Sequence{lc_p1, lc_p2, lc_p3}
	), 
	lc_p1:XWIKI!Property (
		name <- 'id',
		type <- 'String',
		value <- c.id	
	),
	lc_p2:XWIKI!Property (
		name <- 'type',
		type <- 'StaticList',
		value <- if(c.tO.instance=t.name) then 'incoming' else 'outgoing' endif
	),
	lc_p3:XWIKI!Property (
		name <- 'uri',
		type <- 'String',
		value <- t.id
	)
	do {
		thisModule.documentRoot.object <- lc;
	}
	
}